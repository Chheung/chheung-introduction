{"version":3,"sources":["typewriting.js"],"names":["root","factory","define","amd","exports","_typeof","module","require","TypeWriting","window","undefined","_currentNumber","_inHTMLTag","_taskStatus","UNREADY","READY","TYPEING","targetElement","inputString","typingInterval","blinkInterval","cursorColor","pluginCallback","defaults","length","nextString","_sliceDisplayText","slice","innerHTML","_typingGo","setTimeout","task","to","_cleanCallback","extendDefaults","source","properties","property","hasOwnProperty","callbackFunction","_classCallCheck","this","options","Error","console","error","calcDiv","document","createElement","style","display","appendChild","cursorHeight","offsetHeight","cursorWidth","offsetWidth","removeChild","cssStyle","styleNode","type","styleSheet","cssText","createTextNode","head","_createClass","key","value","_this","warn","TYPING"],"mappings":"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","file":"typewriting.min.js","sourcesContent":["/*!\n * TypeWriting.js\n *\n * Copyright Â© 2017 Eddie Wen | MIT license\n * https://github.com/EddieWen-Taiwan/TypeWriting.js\n */\n\n(function(root, factory) {\n\tif( typeof define === 'function' && define.amd ) {\n\t\tdefine(factory);\n\t}\n\telse if(typeof exports === 'object') {\n\t\tmodule.exports = factory(require, exports, module);\n\t}\n\telse if( root ) {\n\t\troot.TypeWriting = factory();\n\t}\n\telse {\n\t\twindow.TypeWriting = factory();\n\t}\n}(this, (require, exports, module) => {\n\t'use strict';\n\n\t/**\n\t * the exported string position\n\t */\n\tlet _currentNumber = 1;\n\t/**\n\t * whether is between a html tag\n\t */\n\tlet _inHTMLTag = false;\n\n\t/**\n\t * plugin task status\n\t */\n\tconst _taskStatus = {\n\t\tUNREADY: 'UNREADY',\n\t\tREADY: 'READY',\n\t\tTYPEING: 'TYPEING',\n\t};\n\n\t/**\n\t * the default config\n\t */\n\tlet defaults = {\n\t\ttargetElement\t: null,\n\t\tinputString \t: '',\n\t\ttypingInterval\t: 150,\n\t\tblinkInterval\t: '0.7s',\n\t\tcursorColor\t\t: 'black',\n\t\tpluginCallback\t: () => {},\n\t\ttask\t\t\t: _taskStatus.UNREADY,\n\t};\n\n\tconst _typingGo = () => {\n\n\t\tif( _currentNumber <= defaults.inputString.length ) {\n\n\t\t\tconst nextString = _sliceDisplayText(_currentNumber);\n\t\t\t_currentNumber += 1;\n\n\t\t\tif( nextString.slice(-1) === '<' ) {\n\t\t\t\t_inHTMLTag = true;\n\t\t\t}\n\t\t\telse if( nextString.slice(-1) === '>' ) {\n\t\t\t\t_inHTMLTag = false;\n\t\t\t}\n\n\t\t\tdefaults.targetElement.innerHTML = nextString;\n\n\t\t\tif( _inHTMLTag ) {\n\t\t\t\t_typingGo();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t_typingGo();\n\t\t\t\t}, defaults.typingInterval);\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tdefaults.task = _taskStatus.READY;\n\t\t\t_currentNumber = 1;\n\t\t\tdefaults.pluginCallback.call();\n\t\t}\n\n\t};\n\n\tconst _sliceDisplayText = (to) => (\n\t\tdefaults.inputString.slice( 0, to )\n\t);\n\n\tconst _cleanCallback = () => {\n\t\tdefaults.pluginCallback = () => {};\n\t};\n\n\t// Utility method to extend defaults with user options\n\tconst extendDefaults = (source, properties) => {\n\t\tfor( const property in properties ) {\n\t\t\tif( properties.hasOwnProperty(property) ) {\n\t\t\t\tsource[property] = properties[property];\n\t\t\t}\n\t\t}\n\t\treturn source;\n\t};\n\n\t/**\n\t * TypeWriting constructor\n\t */\n\tclass TypeWriting {\n\n\t\tconstructor(options, callbackFunction) {\n\n\t\t\tif( !options || typeof options !== 'object' ) {\n\t\t\t\tthrow new Error('`options` is invalid');\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * check value from user\n\t\t\t * the string will be put in target later\n\t\t\t */\n\t\t\tif( !options.inputString ) {\n\t\t\t\tthrow new Error('Missing argument: inputString');\n\t\t\t}\n\t\t\tif( typeof options.inputString !== 'string' ) {\n\t\t\t\tthrow new Error('`inputString` is not a string');\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * set the custom config\n\t\t\t */\n\t\t\tdefaults = extendDefaults(defaults, options);\n\n\t\t\t/**\n\t\t\t * callback function\n\t\t\t */\n\t\t\tif( callbackFunction ) {\n\t\t\t\tif( typeof callbackFunction === 'function' ) {\n\t\t\t\t\tdefaults.pluginCallback = callbackFunction;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.error(`${callbackFunction} is not a function`);\n\t\t\t\t\t_cleanCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_cleanCallback();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Calculate proper size of cursor\n\t\t\t * by inserting a new inline-element with `I`\n\t\t\t */\n\t\t\tconst calcDiv = document.createElement('div');\n\t\t\tcalcDiv.style.display = 'inline-block';\n\t\t\tcalcDiv.innerHTML = 'I';\n\t\t\tdefaults.targetElement.appendChild(calcDiv);\n\t\t\tconst cursorHeight = calcDiv.offsetHeight;\n\t\t\tconst cursorWidth = calcDiv.offsetWidth;\n\t\t\tdefaults.targetElement.removeChild(calcDiv);\n\n\t\t\t/**\n\t\t\t * cursor css style\n\t\t\t */\n\t\t\tconst cssStyle = `@-webkit-keyframes blink{0%,100%{opacity:1}50%{opacity:0}}@-moz-keyframes blink{0%,100%{opacity:1}50%{opacity:0}}@keyframes blink{0%,100%{opacity:1}50%{opacity:0}}.typingCursor::after{content:'';width:${cursorWidth}px;height:${cursorHeight}px;margin-left:5px;display:inline-block;vertical-align:bottom;background-color:${defaults.cursorColor};-webkit-animation:blink ${defaults.blinkInterval} infinite;-moz-animation:blink ${defaults.blinkInterval} infinite;animation:blink ${defaults.blinkInterval} infinite}`;\n\n\t\t\t/**\n\t\t\t * add CSS style in HEAD\n\t\t\t */\n\t\t\tconst styleNode = document.createElement('style');\n\t\t\tstyleNode.type = 'text/css';\n\t\t\tif( styleNode.styleSheet ) {\n\t\t\t\tstyleNode.styleSheet.cssText = cssStyle;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstyleNode.appendChild(document.createTextNode(cssStyle));\n\t\t\t}\n\t\t\tdocument.head.appendChild(styleNode);\n\n\t\t\tdefaults.targetElement.className += ' typingCursor';\n\t\t\tdefaults.task = _taskStatus.TYPING;\n\t\t\t_typingGo();\n\n\t\t}\n\n\t\t/**\n\t\t * change the text on the same target\n\t\t */\n\t\trewrite(inputString, callbackFunction) {\n\n\t\t\tif( defaults.task === _taskStatus.TYPING ) {\n\t\t\t\tconsole.warn('Last task is not finished yet');\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.rewrite( inputString, callbackFunction );\n\t\t\t\t}, defaults.typingInterval);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * check value\n\t\t\t * the string will be put in target later\n\t\t\t */\n\t\t\tif( !inputString ) {\n\t\t\t\tthrow new Error('Missing argument: inputString');\n\t\t\t}\n\t\t\tif( typeof inputString !== 'string' ) {\n\t\t\t\tthrow new Error('`inputString` is not a string');\n\t\t\t}\n\n\t\t\tdefaults.inputString = inputString;\n\n\t\t\t/**\n\t\t\t * callback function\n\t\t\t */\n\t\t\tif( callbackFunction ) {\n\t\t\t\tif( typeof callbackFunction === 'function' ) {\n\t\t\t\t\tdefaults.pluginCallback = callbackFunction;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.error(`${callbackFunction} is not a function`);\n\t\t\t\t\t_cleanCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_cleanCallback();\n\t\t\t}\n\n\t\t\tdefaults.task = _taskStatus.TYPING;\n\t\t\t_typingGo();\n\n\t\t}\n\n\t}\n\n\treturn TypeWriting;\n\n}));\n"]}